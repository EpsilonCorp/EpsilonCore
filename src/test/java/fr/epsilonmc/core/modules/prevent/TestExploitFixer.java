package fr.epsilonmc.core.modules.prevent;

import be.seeseemelk.mockbukkit.MockBukkit;
import be.seeseemelk.mockbukkit.ServerMock;
import be.seeseemelk.mockbukkit.inventory.InventoryViewMock;
import be.seeseemelk.mockbukkit.inventory.meta.BookMetaMock;
import fr.epsilonmc.mock.bukkit.EpsilonInventoryViewMock;
import fr.epsilonmc.mock.core.CoreMock;
import fr.epsilonmc.mock.bukkit.EpsilonPlayerMock;
import org.bukkit.Material;
import org.bukkit.event.inventory.ClickType;
import org.bukkit.event.inventory.InventoryAction;
import org.bukkit.event.inventory.InventoryClickEvent;
import org.bukkit.event.inventory.InventoryType;
import org.bukkit.event.player.PlayerEditBookEvent;
import org.bukkit.inventory.ItemStack;
import org.junit.jupiter.api.*;

import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class TestExploitFixer {

    private ServerMock server;
    private CoreMock coreMock;

    @BeforeAll
    public void setUp() {
        server = MockBukkit.mock();
        coreMock = MockBukkit.load(CoreMock.class);
    }

    @Test
    @DisplayName("Test if player edit book works fine")
    public void testPlayerEditBook() {
        EpsilonPlayerMock epsilonPlayerMock = new EpsilonPlayerMock("Lucas__Lks");
        server.addPlayer(epsilonPlayerMock);

        PlayerEditBookEvent playerEditBookEvent = new PlayerEditBookEvent(
                epsilonPlayerMock,
                0,
                new BookMetaMock(),
                new BookMetaMock(),
                false
        );
        coreMock.getServer().getPluginManager().callEvent(playerEditBookEvent);
        assertTrue(playerEditBookEvent.isCancelled());
    }

    @Test
    @DisplayName("Test if player click on book works fine")
    public void testPlayerClickOnBook() {
        EpsilonPlayerMock epsilonPlayerMock = new EpsilonPlayerMock("Lucas__Lks");
        server.addPlayer(epsilonPlayerMock);

        ItemStack itemStack = new ItemStack(Material.WRITTEN_BOOK);

        InventoryClickEvent inventoryClickEvent = new InventoryClickEvent(
                new EpsilonInventoryViewMock(
                        epsilonPlayerMock,
                        epsilonPlayerMock.getInventory(),
                        epsilonPlayerMock.getInventory(),
                        InventoryType.PLAYER
                ),
                InventoryType.SlotType.OUTSIDE,
                1,
                ClickType.RIGHT,
                InventoryAction.COLLECT_TO_CURSOR
        );
        inventoryClickEvent.setCurrentItem(itemStack);
        coreMock.getServer().getPluginManager().callEvent(inventoryClickEvent);

        assertNull(inventoryClickEvent.getCurrentItem());
    }

    @AfterAll
    public void tearDown() {
        MockBukkit.unload();
    }

}
